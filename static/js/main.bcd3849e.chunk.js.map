{"version":3,"sources":["Components/Textforms.js","Components/Alert.js","Components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Textforms","props","_useState","useState","_useState2","Object","slicedToArray","Text","NewText","react_default","a","createElement","Fragment","className","style","color","mode","Heading","value","onChange","event","console","log","target","backgroundColor","id","rows","onClick","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","concat","type","role","word","lower","charAt","slice","capitalize","msg","Navbar","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","AboutSet","toggleMode","htmlFor","App","Setmode","_useState3","_useState4","setalert","message","setTimeout","body","Components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bcd3849e.chunk.js","sourcesContent":["import React , {useState} from 'react'\r\n\r\nexport default function Textforms(props){\r\n\r\n  const handleUpchange = () =>\r\n  {\r\n    // console.log(\"return the value in console\" + Text);\r\n    \r\n     let newtext = Text.toUpperCase();\r\n     NewText(newtext)\r\n     props.showAlert(\"Converted to uppercase!\" , \"success\");\r\n  }\r\n  const handleLochange = () =>\r\n  {\r\n    // console.log(\"return the value in console\" + Text);\r\n     let newtext = Text.toLowerCase();\r\n     NewText(newtext)\r\n     props.showAlert(\"Converted to lowercase!\" , \"success\");\r\n  }\r\n\r\n  const handlextraspaces = () => {\r\n   let newtext = Text.split(/[ ]+/);\r\n   NewText(newtext.join(\" \"))\r\n   props.showAlert(\"Extra spaces removed!\" ,\"success\");\r\n  }\r\n  const handleClearchange = () =>\r\n  {\r\n    // console.log(\"return the value in console\" + Text);\r\n     let newtext = \"\";\r\n     NewText(newtext);\r\n     props.showAlert(\"Clear Text!\" ,\"success\");\r\n  }\r\n\r\n  const handlecopy = () => {\r\n    console.log(\"I am copy\");\r\n    var Text = document.getElementById(\"my-box\");\r\n    Text.select();\r\n    Text.setSelectionRange(0,9999);\r\n    navigator.clipboard.writeText(Text.value);\r\n    props.showAlert(\"Copied to Clipboard !\", \"success\");\r\n  }\r\n  const handleup = (event) =>\r\n  {\r\n    console.log(\"Newtext\");\r\n    NewText(event.target.value);\r\n  }\r\n  const[Text , NewText] = useState(\"\")\r\n  return (\r\n   <>\r\n  <div className = \"container\" style ={{color : props.mode==='dark'?'white':'#042743'}}>\r\n    <h1>{props.Heading} </h1>\r\n    <div className=\"mb-3\">\r\n   <textarea className=\"form-control\" value = {Text} onChange = {handleup} style= {{backgroundColor: props.mode==='dark'?'grey':'white' , color : props.mode==='dark'?'white':'#042743'}} id=\"my-box\" rows=\"9\"></textarea>\r\n     </div>\r\n    <button className = \"btn btn-dark mx-2\" onClick = {handleUpchange}>Convert into Upper</button>\r\n    <button className = \"btn btn-dark mx-2 \" onClick = {handleLochange}>Convert into Lower</button>\r\n    <button className = \"btn btn-dark mx-2\" onClick = {handleClearchange}>Clear Text</button>\r\n    <button className = \"btn btn-dark mx-2\" onClick = {handlecopy}>Copy Text</button>\r\n    <button className = \"btn btn-dark mx-2\" onClick = {handlextraspaces}>Remove extra space</button>\r\n    \r\n    </div>\r\n   <div className=\"container my-3\" style= {{color: props.mode==='dark'?'white':'#042743'}}>\r\n     <h1>Your Text Summary </h1>\r\n      <p>{Text.split(\" \").length} words and {Text.length} characters</p>\r\n      <p>{0.008*Text.split(\" \").length} Minutes read</p>\r\n      <h3>Preview</h3>\r\n      <p>{Text.length>0?Text: \"Enter something to preview it here\"}</p>\r\n    \r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    // use for green color :-  {props.alert.type}\r\n      props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      {capitalize(props.alert.type)}:  {props.alert.msg}\r\n       \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> \r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active mx-2\" aria-current=\"page\" href=\"#\">Home</a>\r\n            {/* <Link className=\"nav-link active mx-2\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" href=\"/About\">{props.AboutSet}</a>   \r\n            {/* <Link className=\"nav-link active\" to=\"/About\">{props.AboutSet}</Link>    */}\r\n          </li>\r\n          \r\n        </ul>\r\n              <div className={`form-check form-switch  text-${props.mode==='light'?'dark':'light'}`}>\r\n               <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" id=\"flexroutesCheckDefault\"/>\r\n               <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n         </div>\r\n      </div>\r\n    </div>\r\n  </nav>  \r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n     title : PropTypes.string,\r\n     AboutText : PropTypes.string\r\n    }\r\n\r\n// Navbar.defaultProps = {\r\n//      title : 'set titles here' ,\r\n//      AboutText : 'About Us'\r\n// }","import './App.css';\nimport React , {useState} from 'react';\nimport Textforms from './Components/Textforms';\n\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\n// import{\n//   BrowserReactor as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\"\n\nfunction App() {\n  const [mode, Setmode] = useState(\"light\");\n  const[alert , setalert] = useState(null);\n\n  const showAlert = (message , type) => {\n    setalert({\n       msg : message,\n       type : type\n     })\n     setTimeout(() => {\n      setalert(null);\n     }, 2000 )\n   } \n  const toggleMode = () =>\n  {\n    if(mode === 'light')\n    { \n      Setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert (\"Dark Mode has been enabled\" , \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else  \n    \n    {\n      Setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\" , \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (  \n   <>\n   {/* Router */}\n    <Navbar title=\"Textutils\" mode ={mode} toggleMode={toggleMode}/>\n    {/* <Navbar title=\"Textutils\" AboutSet=\"About \"  mode ={mode} toggleMode={toggleMode}/> */}\n    <Alert alert = {alert}/>\n    <div className=\"nav-item\">\n      {/* Switch */}\n       {/* Route exact path =\"/About\" */}\n         {/*< About/> */}\n         {/* <Route/> */}\n       {/* Route exact path =\"/\" */}\n        <Textforms showAlert= {showAlert} Heading = \"Enter The Text Analyzer\" mode={mode}/>\n         {/*< About/> */}\n          {/* <Route/> */}\n     \n    </div>\n   {/* Router */}\n   \n   </>   \n  );\n}\n\nexport default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}